{"version":3,"sources":["constants.js"],"names":["_bignumber","_interopRequireDefault","require","ETHER","BigNumber","Math","pow","FINNEY","SZABO","GWEI","MWEI","KWEI","formatWei","wei","b","sign","lt","multipliedBy","gte","dividedBy","toNumber","FAUCET_REWARD","FUNCTION","TRANSFER","PENDING","TxPayloadType","SUCCESS","FAILURE","TxResultStatus"],"mappings":"4PAAA,IAAAA,WAAAC,uBAAAC,QAAA,yFACO,IAAMC,MAAQ,IAAIC,WAAAA,QAAUC,KAAKC,IAAI,GAAI,yBACzC,IAAMC,OAAS,IAAIH,WAAAA,QAAUC,KAAKC,IAAI,GAAI,2BAC1C,IAAME,MAAQ,IAAIJ,WAAAA,QAAUC,KAAKC,IAAI,GAAI,yBACzC,IAAMG,KAAO,IAAIL,WAAAA,QAAUC,KAAKC,IAAI,GAAI,sBACxC,IAAMI,KAAO,IAAIN,WAAAA,QAAUC,KAAKC,IAAI,GAAI,sBACxC,IAAMK,KAAO,IAAIP,WAAAA,QAAUC,KAAKC,IAAI,GAAI,IAN/C,SAAAM,UAAAC,GASE,IAAIC,EAAI,IAAIV,WAAAA,QAAUS,GAChBE,EAAOD,EAAEE,GAAG,IAAM,EAAI,EAG5B,OAFAF,EAAIA,EAAEG,aAAaF,IAEbG,IAAIf,OAENW,EAZYG,aAAOb,GAchBe,UAAUhB,OAbFiB,WAAOhB,SAiBlBU,EAAEI,IAAIX,QAENO,EACGG,aAAaF,GAhBNH,UAAUC,QACnBO,WAAOhB,UAoBRU,EAAEI,IAAIV,OAfRM,EAMDG,aAAAF,GAaMI,UAAUX,OAZXU,WAAa,SAgBfJ,EAAEI,IAAIT,MAPRK,EAMDG,aAAAF,GAKMI,UAAUV,MAJXS,WAAW,QAQbJ,EAAEI,IAAIR,MACRI,EAMDG,aAAAF,GAHMI,UAAUT,MAIXQ,WAAW,OAAbJ,EAAEI,IAAIP,MASXG,EANQG,aAAaF,GAOdH,UAARD,MAEaU,WAAgB,QAG3BC,EAAQF,WADmB,yBAG3BG,QAAAA,UAAUX,UALL,IAAMS,cAAgB,IAAIjB,WAAAA,QAAU,KAAMa,aAAad,2CAS5DqB,IAASC,cADmB,CAE5BC,SAAS,WACTC,SAAS,WAHJJ,SAAA,gDAAA,IAAMK,eAAiB,CAC5BJ,QAAS,UACTE,QAAS,UACTC,QAAS","file":"constants.js","sourcesContent":["import BigNumber from \"bignumber.js\";\nexport const ETHER = new BigNumber(Math.pow(10, 18));\nexport const FINNEY = new BigNumber(Math.pow(10, 15));\nexport const SZABO = new BigNumber(Math.pow(10, 12));\nexport const GWEI = new BigNumber(Math.pow(10, 9));\nexport const MWEI = new BigNumber(Math.pow(10, 6));\nexport const KWEI = new BigNumber(Math.pow(10, 3));\n\nexport function formatWei(wei) {\n  var b = new BigNumber(wei);\n  const sign = b.lt(0) ? -1 : 1;\n  b = b.multipliedBy(sign);\n\n  if (b.gte(ETHER)) {\n    return (\n      b\n        .multipliedBy(sign)\n        .dividedBy(ETHER)\n        .toNumber() + \" Ether\"\n    );\n  }\n  if (b.gte(FINNEY)) {\n    return (\n      b\n        .multipliedBy(sign)\n        .dividedBy(FINNEY)\n        .toNumber() + \" Finney\"\n    );\n  }\n  if (b.gte(SZABO)) {\n    return (\n      b\n        .multipliedBy(sign)\n        .dividedBy(SZABO)\n        .toNumber() + \" Szabo\"\n    );\n  }\n  if (b.gte(GWEI)) {\n    return (\n      b\n        .multipliedBy(sign)\n        .dividedBy(GWEI)\n        .toNumber() + \" GWei\"\n    );\n  }\n  if (b.gte(MWEI)) {\n    return (\n      b\n        .multipliedBy(sign)\n        .dividedBy(MWEI)\n        .toNumber() + \" Wei\"\n    );\n  }\n  if (b.gte(KWEI)) {\n    return (\n      b\n        .multipliedBy(sign)\n        .dividedBy(KWEI)\n        .toNumber() + \" Kwei\"\n    );\n  }\n  return b.toNumber() + \" Wei\";\n}\nexports.formatWei = formatWei;\n\nexport const FAUCET_REWARD = new BigNumber(1000).multipliedBy(ETHER);\n\nexport const TxPayloadType = {\n  FUNCTION: \"FUNCTION\",\n  CONTRACT: \"CONTRACT\",\n  TRANSFER: \"TRANSFER\"\n};\n\nexport const TxResultStatus = {\n  PENDING: \"Pending\",\n  SUCCESS: \"Success\",\n  FAILURE: \"Failure\"\n};\n"]}