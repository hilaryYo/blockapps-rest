{"version":3,"sources":["rest.js"],"names":["_bignumber","require","_httpStatusCodes","_interopRequireDefault","_api","_constants","_util","_api2","_rest","_jsonwebtoken","isTxSuccess","txResult","status","TxResultStatus","SUCCESS","isTxFailure","FAILURE","assertTxResult","RestError","RestStatus","BAD_REQUEST","message","assertTxResultList","txResultList","forEach","index","concat","resolveResult","_callee","user","pendingTxResult","options","regeneratorRuntime","wrap","_context","prev","next","resolveResults","abrupt","sent","stop","_callee3","pendingResults","_options","predicate","action","resolvedResults","_args3","arguments","_context3","length","undefined","Object","assign","isAsync","results","PENDING","_ref","_asyncToGenerator","mark","_callee2","_context2","getBlocResults","map","r","hash","apply","this","util","until","getUsers","_callee4","args","users","_context4","api","_callee5","_ref2","_ref3","address","_context5","getUser","_slicedToArray","createOrGetKey","fill","_callee7","_context7","createContract","_callee8","contract","_ref4","_ref5","_context8","createContractResolve","_callee9","resolvedTxResult","_context9","isDetailed","data","contents","name","createContractList","_callee10","_ref6","_ref7","_context10","createContractListResolve","_callee11","pendingTxResultList","resolvedTxResultList","_context11","getKey","_callee12","response","_context12","createKey","_callee13","_context13","_callee14","_response","_response2","_context14","_objectSpread","isEqualTo","t0","_callee15","hashes","_context15","blocResults","getState","_callee16","_context16","getBatchStates","_callee17","contracts","_context17","getArray","_callee18","MAX_SEGMENT_SIZE","state","result","segment","_state","_context18","stateQuery","offset","count","push","_toConsumableArray","call","_callee19","callArgs","_ref8","_ref9","_context19","callResolve","_callee20","_context20","callList","_callee21","callListArgs","_context21","callListResolve","_callee22","_context22","send","sendTx","resolvedResult","sendMany","_callee24","sendTxs","pendingTxResults","_context24","sendTransactions","txs","tx","getSendArgs","search","_callee25","_context25","NOT_FOUND","searchUntil","_callee27","_context27","_ref12","_callee26","o","_context26","_x109","searchWithContentRange","_callee28","_context28","searchWithContentRangeUntil","_callee30","_context30","_ref13","_callee29","_context29","_x110","getChain","_callee31","chainId","_context31","getChains","setAuthHeaders","_callee32","chainIds","_context32","createChain","_callee33","chain","_context33","metadata","constructMetadata","createChains","_callee34","chains","_context34","uploadExtStorage","_callee35","_context35","attestExtStorage","_callee36","_context36","verifyExtStorage","downloadExtStorage","_callee38","_context38","listExtStorage","_callee39","_context39","pingOauth","_callee40","_context40","waitForAddress","_callee41","_context41","query","createUser"],"mappings":"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","file":"rest.js","sourcesContent":["import { BigNumber } from \"bignumber.js\";\nimport RestStatus from \"http-status-codes\";\nimport api from \"./api\";\nimport { TxResultStatus } from \"./constants\";\nimport util from \"./util/util\";\nimport { constructMetadata, setAuthHeaders } from \"./util/api.util\";\nimport { RestError, response } from \"./util/rest.util\";\nimport jwt from \"jsonwebtoken\";\n\n// =====================================================================\n//   util\n// =====================================================================\n\nfunction isTxSuccess(txResult) {\n  return txResult.status === TxResultStatus.SUCCESS;\n}\n\nfunction isTxFailure(txResult) {\n  return txResult.status === TxResultStatus.FAILURE;\n}\n\nfunction assertTxResult(txResult) {\n  if (isTxFailure(txResult)) {\n    throw new RestError(\n      RestStatus.BAD_REQUEST,\n      txResult.txResult.message,\n      txResult.txResult\n    );\n  }\n  return txResult;\n}\n\nfunction assertTxResultList(txResultList) {\n  txResultList.forEach((txResult, index) => {\n    if (isTxFailure(txResult)) {\n      throw new RestError(\n        RestStatus.BAD_REQUEST,\n        `tx:${index}, message:${txResult.txResult.message}`,\n        { index, txResult: txResult.txResult }\n      );\n    }\n  });\n  return txResultList;\n}\n\nasync function resolveResult(user, pendingTxResult, options) {\n  return (await resolveResults(user, [pendingTxResult], options))[0];\n}\n\nasync function resolveResults(user, pendingResults, _options = {}) {\n  const options = Object.assign({ isAsync: true }, _options);\n\n  // wait until there are no more PENDING results\n  const predicate = results =>\n    results.filter(r => r.status === TxResultStatus.PENDING).length === 0;\n  const action = async () =>\n    getBlocResults(user, pendingResults.map(r => r.hash), options);\n  const resolvedResults = await util.until(predicate, action, options);\n  return resolvedResults;\n}\n\n// =====================================================================\n//   user\n// =====================================================================\n\nasync function getUsers(args, options) {\n  const users = await api.getUsers(args, options);\n  return users;\n}\n\nasync function getUser(args, options) {\n  const [address] = await api.getUser(args, options);\n  return address;\n}\n\nasync function createUser(args, options) {\n  const address = await createOrGetKey(args, options);\n  const user = Object.assign({}, args, { address });\n  return user;\n}\n\nasync function fill(user, options) {\n  const txResult = await api.fill(user, options);\n  return assertTxResult(txResult);\n}\n\n// =====================================================================\n//   contract\n// =====================================================================\n\nasync function createContract(user, contract, options) {\n  const [pendingTxResult] = await api.createContract(user, contract, options);\n  return createContractResolve(user, pendingTxResult, options);\n}\n\nasync function createContractResolve(user, pendingTxResult, options) {\n  // throw if FAILURE\n  assertTxResult(pendingTxResult);\n  // async - do not resolve\n  if (options.isAsync) return pendingTxResult;\n  // resolve - wait until not pending\n  const resolvedTxResult = await resolveResult(user, pendingTxResult, options);\n  // throw if FAILURE\n  assertTxResult(pendingTxResult);\n  // options.isDetailed - return all the data\n  if (options.isDetailed) return resolvedTxResult.data.contents;\n  // return basic contract object\n  return {\n    name: resolvedTxResult.data.contents.name,\n    address: resolvedTxResult.data.contents.address\n  };\n}\n\n// =====================================================================\n//   contract list\n// =====================================================================\n\nasync function createContractList(user, contract, options) {\n  const [pendingTxResult] = await api.createContractList(\n    user,\n    contract,\n    options\n  );\n  return createContractListResolve(pendingTxResult, options);\n}\n\nasync function createContractListResolve(pendingTxResultList, options) {\n  // throw if FAILURE\n  assertTxResultList(pendingTxResultList); // @samrit what if 1 result failed ?\n  // async - do not resolve\n  if (options.isAsync) return pendingTxResultList;\n  // resolve - wait until not pending\n  const resolvedTxResultList = await resolveResults(\n    user,\n    pendingTxResultList,\n    options\n  );\n  // throw if FAILURE\n  assertTxResultList(resolvedTxResultList);\n  // options.isDetailed - return all the data\n  if (options.isDetailed) return resolvedTxResultList;\n  // return a list basic contract object\n  return resolvedTxResultList.map(\n    resolvedTxResult => resolvedTxResult.data.contents\n  );\n}\n\n// =====================================================================\n//   key\n// =====================================================================\n\nasync function getKey(user, options) {\n  const response = await api.getKey(user, options);\n  return response.address;\n}\n\nasync function createKey(user, options) {\n  const response = await api.createKey(user, options);\n  return response.address;\n}\n\nasync function createOrGetKey(user, options) {\n  try {\n    const response = await api.getKey(user, options);\n\n    const balance = await api.getBalance({ ...user, ...response }, options);\n    if (balance.isEqualTo(0)) {\n      await fill({ ...user, ...response }, { isAsync: false, ...options });\n    }\n    return response.address;\n  } catch (err) {\n    const response = await api.createKey(user, options);\n    await fill({ ...user, ...response }, { isAsync: false, ...options });\n    return response.address;\n  }\n}\n\n// =====================================================================\n//   state\n// =====================================================================\n\nasync function getBlocResults(user, hashes, options) {\n  return api.blocResults(user, hashes, options);\n}\n\nasync function getState(user, contract, options) {\n  return api.getState(user, contract, options);\n}\n\nasync function getBatchStates(user, contracts, options) {\n  return api.getBatchStates(user, contracts, options);\n}\n\nasync function getArray(user, contract, name, options) {\n  const MAX_SEGMENT_SIZE = 100;\n  options.stateQuery = { name, length: true };\n  const state = await getState(user, contract, options);\n  const length = state[name];\n  const result = [];\n  for (let segment = 0; segment < length / MAX_SEGMENT_SIZE; segment++) {\n    options.stateQuery = {\n      name,\n      offset: segment * MAX_SEGMENT_SIZE,\n      count: MAX_SEGMENT_SIZE\n    };\n    const state = await getState(user, contract, options);\n    result.push(...state[name]);\n  }\n  return result;\n}\n\n// =====================================================================\n//   call\n// =====================================================================\n\nasync function call(user, callArgs, options) {\n  const [pendingTxResult] = await api.call(user, callArgs, options);\n  return callResolve(user, pendingTxResult, options);\n}\n\nasync function callResolve(user, pendingTxResult, options) {\n  // throw if FAILURE\n  assertTxResult(pendingTxResult);\n  // async - do not resolve\n  if (options.isAsync) return pendingTxResult;\n  // resolve - wait until not pending\n  const resolvedTxResult = await resolveResult(user, pendingTxResult, options);\n  // throw if FAILURE\n  assertTxResult(pendingTxResult);\n  // options.isDetailed - return all the data\n  if (options.isDetailed) return resolvedTxResult;\n  // return basic contract object\n  return resolvedTxResult.data.contents;\n}\n\n// =====================================================================\n//   call list\n// =====================================================================\n\nasync function callList(user, callListArgs, options) {\n  const pendingTxResultList = await api.callList(user, callListArgs, options);\n  return callListResolve(user, pendingTxResultList, options);\n}\n\nasync function callListResolve(user, pendingTxResultList, options) {\n  // throw if FAILURE\n  assertTxResultList(pendingTxResultList); // @samrit what if 1 result failed ?\n  // async - do not resolve\n  if (options.isAsync) return pendingTxResultList;\n  // resolve - wait until not pending\n  const resolvedTxResultList = await resolveResults(\n    user,\n    pendingTxResultList,\n    options\n  );\n  // throw if FAILURE\n  assertTxResultList(resolvedTxResultList);\n  // options.isDetailed - return all the data\n  if (options.isDetailed) return resolvedTxResultList;\n  // return a list basic contract object\n  return resolvedTxResultList.map(\n    resolvedTxResult => resolvedTxResult.data.contents\n  );\n}\n\n// =====================================================================\n//   send\n// =====================================================================\n\nasync function send(user, sendTx, options) {\n  const [pendingTxResult] = await api.send(user, sendTx, options);\n\n  if (options.isAsync) {\n    return pendingTxResult;\n  }\n\n  const resolvedResult = await resolveResult(user, pendingTxResult, options);\n  return resolvedResult.data.contents;\n}\n\nasync function sendMany(user, sendTxs, options) {\n  const pendingTxResults = await api.sendTransactions(\n    user,\n    {\n        txs: sendTxs.map(tx => api.getSendArgs(tx, options)),\n    },\n    options\n  );\n\n  if (options.isAsync) {\n    return pendingTxResults.map(r => r.hash);\n  }\n\n  const resolvedResults = await resolveResults(user, pendingTxResults, options);\n  return resolvedResults.map(r => r.data.contents);\n}\n\n// =====================================================================\n//   search\n// =====================================================================\n\nasync function search(user, contract, options) {\n  try {\n    const results = await api.search(user, contract, options);\n    return results;\n  } catch (err) {\n    if (err.response && err.response.status === RestStatus.NOT_FOUND) {\n      return [];\n    }\n    throw err;\n  }\n}\n\nasync function searchUntil(user, contract, predicate, options) {\n  const action = async o => {\n    return search(user, contract, o);\n  };\n\n  const results = await util.until(predicate, action, options);\n  return results;\n}\n\nasync function searchWithContentRange(user, contract, options) {\n  try {\n    const results = await api.searchWithContentRange(user, contract, options);\n    return results;\n  } catch (err) {\n    if (err.response && err.response.status === RestStatus.NOT_FOUND) {\n      return {};\n    }\n    throw err;\n  }\n}\n\nasync function searchWithContentRangeUntil(user, contract, predicate, options) {\n  const action = async o => {\n    return searchWithContentRange(user, contract, o);\n  };\n\n  const results = await util.until(predicate, action, options);\n  return results;\n}\n\n// =====================================================================\n//   Chains\n// =====================================================================\n\nasync function getChain(user, chainId, options) {\n  const results = await api.getChains([chainId], setAuthHeaders(user, options));\n  return results && results.length > 0 ? results[0] : {};\n}\n\nasync function getChains(user, chainIds, options) {\n  const results = await api.getChains(chainIds, setAuthHeaders(user, options));\n  return results;\n}\n\nasync function createChain(user, chain, contract, options) {\n  const result = await api.createChain(\n    {\n      ...chain,\n      contract: contract.name,\n      metadata: constructMetadata(options, contract.name)\n    },\n    setAuthHeaders(user, options)\n  );\n  return result;\n}\n\nasync function createChains(user, chains, options) {\n  const result = await api.createChains(chains, setAuthHeaders(user, options));\n  return result;\n}\n\n// =====================================================================\n//   External Storage\n// =====================================================================\n\nasync function uploadExtStorage(user, args, options) {\n  const result = await api.uploadExtStorage(\n    args,\n    setAuthHeaders(user, options)\n  );\n  return result;\n}\n\nasync function attestExtStorage(user, args, options) {\n  const result = await api.attestExtStorage(\n    args,\n    setAuthHeaders(user, options)\n  );\n  return result;\n}\n\nasync function verifyExtStorage(user, contract, options) {\n  const result = await api.verifyExtStorage(\n    user,\n    contract,\n    options\n  );\n  return result;\n}\n\nasync function downloadExtStorage(user, contract, options) {\n  const result = await api.downloadExtStorage(\n    user,\n    contract,\n    options\n  );\n  return result;\n}\n\nasync function listExtStorage(user, args, options) {\n  const result = await api.listExtStorage(\n    user,\n    args,\n    options\n  );\n  return result;\n}\n\n// =====================================================================\n//   OAuth\n// =====================================================================\n\nasync function pingOauth(user, options) {\n  const response = await api.pingOauth(user, options);\n  return response;\n}\n\n\n// =====================================================================\n//   Common patterns used in applications\n// =====================================================================\n\nasync function waitForAddress(user, contract, _options) {\n  const options = Object.assign(\n    {\n      query: {\n        address: `eq.${contract.address}`\n      }\n    },\n    _options\n  );\n\n  function predicate(response) {\n    return (\n      response !== undefined &&\n      response.length != undefined &&\n      response.length > 0\n    );\n  }\n\n  const results = await searchUntil(user, contract, predicate, options);\n  return results[0];\n}\n\nexport default {\n  getUsers,\n  getUser,\n  createUser,\n  createContract,\n  createContractList,\n  getState,\n  getBatchStates,\n  getArray,\n  call,\n  callList,\n  //\n  resolveResult,\n  resolveResults,\n  //\n  getKey,\n  createKey,\n  createOrGetKey,\n  //\n  send,\n  sendMany,\n  //\n  search,\n  searchUntil,\n  searchWithContentRange,\n  searchWithContentRangeUntil,\n  //\n  createChain,\n  createChains,\n  getChain,\n  getChains,\n  //\n  uploadExtStorage,\n  attestExtStorage,\n  verifyExtStorage,\n  downloadExtStorage,\n  listExtStorage,\n  //\n  pingOauth,\n  //\n  RestError,\n  response,\n  //\n  waitForAddress\n};\n"]}