{"version":3,"sources":["util/assert.js"],"names":["_chai","require","stringify","assert","restStatus","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","func","expectedRestStatus","regex","expectedStatusText","result","dataString","restStatusText","wrap","_context","prev","next","sent","t0","isDefined","response","status","equal","undefined","data","isOk","test","concat","statusText","abrupt","isUndefined","stop","_x","_x2","_x3","_x4","apply","this","arguments"],"mappings":"2FAAA,IAAAA,MAAAC,QAAA,kZACqBA,QAAQ,eAArBC,mBAAAA,UAERC,MAAAA,OAAOC,WAAP,WAAA,IAAAC,EAAAC,kBAAAC,mBAAAC,KAAoB,SAAAC,EAAOC,EAAMC,EAAoBC,EAAOC,GAAxC,IAAAC,EAAAV,EAAAW,EAAAC,EAAA,OAAAT,mBAAAU,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGDV,IAHC,KAAA,EAGhBI,EAHgBI,EAAAG,KAAAH,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAI,GAAAJ,EAAA,MAAA,GAKhBf,MAAAA,OAAOoB,UAAUL,EAAAI,GAAIE,SAAU,6CACzBpB,EAAac,EAAAI,GAAIE,SAASC,OAChCtB,MAAAA,OAAOuB,MAAMtB,EAAYO,EAAoB,mCAC/BgB,IAAVf,IACIG,EAAab,UAAUgB,EAAAI,GAAIE,SAASI,MAC1CzB,MAAAA,OAAO0B,KAZQ5B,EAAQ6B,KAAAf,GAYvB,GAAAgB,OAAuCnB,EAAvC,kBAAAmB,OAA6DhB,KAE3DF,IAZRV,EAAAe,EAAAI,GAAAE,SAAAQ,WAAA7B,MAAAA,OAAAuB,MAAAV,EAAAH,EAAA,+BAAoBK,EAAAe,OAAA,UAAA,KAAA,GAApB9B,MAAAA,OAAA+B,YAAApB,EAAA,6CAAAiB,OAAoBpB,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAO,EAAAiB,SAAA1B,EAAA,KAAA,CAAA,CAAA,EAAA,QAApB,OAAA,SAAA2B,EAAAC,EAAAC,EAAAC,GAAA,OAAAlC,EAAAmC,MAAAC,KAAAC,YAAA,gBAAoBvC,MAAAA","file":"assert.js","sourcesContent":["import { assert } from 'chai'\nconst { stringify} = require('flatted/cjs');\n\nassert.restStatus = async (func, expectedRestStatus, regex, expectedStatusText) => {\n  let result\n  try {\n    result = await func()\n  } catch (err) {\n    assert.isDefined(err.response, 'err.response undefined - not a rest error')\n    const restStatus = err.response.status\n    assert.equal(restStatus, expectedRestStatus, 'expected rest status error')\n    if (regex !== undefined) {\n      const dataString = stringify(err.response.data)\n      assert.isOk(regex.test(dataString), `${regex} not found in ${dataString}`)\n    }\n    if (expectedStatusText) {\n      const restStatusText = err.response.statusText\n      assert.equal(restStatusText, expectedStatusText, 'expected rest status error')\n    }\n    return\n  }\n  assert.isUndefined(result, `REST call completed instead of REST error ${expectedRestStatus}`)\n}\n\nexport default assert\n"]}