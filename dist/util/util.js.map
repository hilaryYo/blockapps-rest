{"version":3,"sources":["util/util.js"],"names":["_path","_interopRequireDefault","require","cwd","path","resolve","process","isAddress","address","test","isChecksumAddress","isHash","hash","_address","addressHash","sha3","toLowerCase","i","parseInt","toUpperCase","iuid","uid","prefix","digits","arguments","length","undefined","random","Math","floor","pow","concat","usc","args","Object","keys","reduce","acc","key","getArgInt","argName","defaultValue","index","argv","indexOf","Error","intValue","stringValue","isNaN","sleep","setTimeout","milli","_callee2","predicate","action","options","timeout","phi","dt","totalSleep","result","_args2","regeneratorRuntime","wrap","_context2","prev","next","sent","abrupt","stop","ms","Promise","filter_isContained","setA","setB","comparator","isDebug","filter","memberA","memberB","until","array","prevVal","elem"],"mappings":"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","file":"util.js","sourcesContent":["import path from 'path'\n\n// odds\nconst cwd = path.resolve(process.cwd())\n\n/**\n * @see https://github.com/ethereum/go-ethereum/blob/aa9fff3e68b1def0a9a22009c233150bf9ba481f/jsre/ethereum_js.go\n *\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n */\nfunction isAddress(address) {\n  // check if it has the basic requirements of an address\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false\n  }\n  // If it's all small caps or all all caps, return true\n  if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n    return true\n  }\n  // Otherwise check each case\n  return isChecksumAddress(address)\n}\n\nfunction isHash(hash) {\n  return /([A-Fa-f0-9]{64})$/.test(hash)\n}\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method isChecksumAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n */\nfunction isChecksumAddress(_address) {\n  // Check each case\n  const address = _address.replace('0x', '')\n  const addressHash = sha3(address.toLowerCase())\n  for (let i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Generates a unique integer id\n */\nfunction iuid() {\n  return this.uid(undefined, 12);\n}\n\nfunction sha3(address) {\n  throw new Error('sha3 not found')\n}\n\nfunction uid(prefix, digits = 6) {\n  if (digits < 1) digits = 1\n  if (digits > 16) digits = 16\n  const random = Math.floor(Math.random() * (10 ** digits))\n  if (prefix === undefined) return random\n  return `${prefix}_${random}`\n}\n\nfunction usc(args) {\n  return Object.keys(args).reduce((acc, key) => {\n    acc[`_${key}`] = args[key]\n    return acc\n  }, {})\n}\n\n/**\n * Parse a command line argument as an integer\n * @param {*} argName Name of the command line argument\n * @param {*} defaultValue Default value to use if argument is not present\n */\nfunction getArgInt(argName, defaultValue) {\n  const index = process.argv.indexOf(argName);\n  if (index <= 0 ) {\n    if (defaultValue !== undefined ) return defaultValue;\n    throw new Error(`Argument not found ${argName}`);\n  }\n  const stringValue = process.argv[index+1];\n  const intValue = parseInt(stringValue);\n  if (isNaN(intValue)) throw new Error(`Invalid int value for ${argName} : ${stringValue}`);\n  return intValue;\n}\n\nasync function sleep(milli) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve()\n    }, milli)\n  })\n}\n\n/**\n * Perform action (a promise) until predicate evaluates to true\n * @param {*} predicate The function that evaluates to a boolean.\n * @param {*} action A promise to invoke. Could be a network request.\n * @param {*} options Ba-rest options\n * @param {*} timeout The length of time to wait before giving up on the predicate\n */\n\nasync function until(predicate, action, options, timeout = 60000) {\n  const phi = 10\n  let dt = 500\n  let totalSleep = 0\n  while (totalSleep < timeout) {\n    const result = await action(options)\n    if (predicate(result)) {\n      return result\n    }\n    await sleep(dt)\n    totalSleep += dt\n    dt += phi\n  }\n  throw new Error(`until: timeout ${timeout} ms exceeded`)\n}\n\nfunction timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Check for intersection\n * @param {*} setA A list\n * @param {*} setB Another list\n * @param {*} comparator Comparator to compare elements of setA and setB\n * @param {*} isDebug Debug mode\n */\n// TODO: pass options instead of isDebug\n function filter_isContained(setA, setB, comparator, isDebug) {\n  if (isDebug) {\n    console.log('setA', setA);\n    console.log('setB', setB);\n  }\n  return setA.filter(function (memberA) {\n    return !setB.filter(function (memberB) {\n      // compare\n      return comparator(memberA, memberB);\n    }).length > 0; // some items were found in setA that are not included in setB\n  });\n}\n\n/**\n * Convert an array to a comma separated string\n * @param {*} array List to convert to csv value\n */\nfunction toCsv(array) {\n  return array.reduce(function (prevVal, elem) {\n    return prevVal + (prevVal.length > 0 ? ',' : '') + elem;\n  }, '');\n}\n\n\n\nexport default {\n  cwd,\n  filter_isContained,\n  getArgInt,\n  isAddress,\n  isHash,\n  iuid,\n  uid,\n  usc,\n  sleep,\n  until,\n  timeout,\n  toCsv\n}\n"]}