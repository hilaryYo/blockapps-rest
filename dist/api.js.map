{"version":3,"sources":["api.js"],"names":["_bignumber","require","_api","_constants","getUsers","_callee","args","options","url","endpoint","regeneratorRuntime","wrap","_context","prev","next","getNodeUrl","constructEndpoint","Endpoint","USERS","abrupt","get","setAuthHeaders","stop","getUser","_callee2","urlParams","_context2","username","USER","createUser","_callee3","data","_context3","password","postue","fill","_callee4","user","body","_context4","FILL","getCreateArgs","contract","payload","name","src","source","chainid","metadata","constructMetadata","type","TxPayloadType","CONTRACT","createContract","_callee5","tx","pendingTxResult","_context5","txs","sendTransactions","sent","contracts","map","pendingTxResultList","blocResults","_callee7","hashes","_context7","TXRESULTS","getAccounts","_callee8","_context8","ACCOUNT","getBalance","_callee9","address","response","accounts","_context9","getKey","query","length","BigNumber","balance","getState","_callee10","_context10","STATE","getBatchStates","_callee11","stateArgs","_context11","STATES","post","callMethodArgs","value","toFixed","contractName","valueFixed","method","FUNCTION","call","_callee12","_context12","getCallArgs","callListArgs","callArgs","_callee14","_context14","SEND","getSendArgs","sendTx","send","_callee15","_context15","_callee16","_context16","KEY","createKey","_callee17","_context17","createContractList","search","_callee18","_context18","SEARCH","searchWithContentRange","_callee19","headersWithCount","optionsWithCount","_ref","headers","contentRangeStr","_contentRangeStr$spli","_contentRangeStr$spli2","range","countStr","count","_contentRange","_range$split$map","_range$split$map2","start","end","contentRange","_context19","_objectSpread","getFullResponse","split","_slicedToArray","parseInt","s","_callee20","chainIds","_context20","CHAIN","config","createChain","_callee21","_context21","CHAINS","uploadExtStorage","_callee23","_context23","EXT_UPLOAD","attestExtStorage","_callee24","_context24","EXT_ATTEST","verifyExtStorage","_callee25","params","_context25","contractAddress","EXT_VERIFY","EXT_DOWNLOAD","listExtStorage","_callee27","limit","offset","_context27","EXT_LIST","pingOauth","_callee28","result","_context28","status","callList","isAsync","getChains","createChains","downloadExtStorage"],"mappings":"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","file":"api.js","sourcesContent":["import { BigNumber } from \"bignumber.js\";\nimport {\n  Endpoint,\n  constructMetadata,\n  constructEndpoint,\n  get,\n  post,\n  postue,\n  getNodeUrl,\n  setAuthHeaders\n} from \"./util/api.util\";\nimport { TxPayloadType } from \"./constants\";\n\nasync function getUsers(args, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.USERS, options);\n  return get(url, endpoint, setAuthHeaders(args, options));\n}\n\nasync function getUser(args, options) {\n  const url = getNodeUrl(options);\n  const urlParams = {\n    username: args.username\n  };\n  const endpoint = constructEndpoint(Endpoint.USER, options, urlParams);\n  return get(url, endpoint, setAuthHeaders(args, options));\n}\n\nasync function createUser(args, options) {\n  const url = getNodeUrl(options);\n  const data = {\n    password: args.password\n  };\n  const urlParams = {\n    username: args.username\n  };\n  const endpoint = constructEndpoint(Endpoint.USER, options, urlParams);\n  return postue(url, endpoint, data, options);\n}\n\nasync function fill(user, options) {\n  const body = {};\n  const url = getNodeUrl(options);\n  const urlParams = {\n    username: user.username,\n    address: user.address\n  };\n  const endpoint = constructEndpoint(Endpoint.FILL, options, urlParams);\n  return postue(url, endpoint, body, setAuthHeaders(user, options));\n}\n\nfunction getCreateArgs(contract, options) {\n  const payload = {\n      contract: contract.name,\n      src: contract.source,\n      args: contract.args,\n      chainid: contract.chainid,\n      metadata: constructMetadata(options, contract.name)\n  };\n  const tx = {\n    payload,\n    type: TxPayloadType.CONTRACT\n  };\n  return tx;\n}\n\nasync function createContract(user, contract, options) {\n  const tx = getCreateArgs(contract, options);\n  const body = {\n    txs: [tx]\n  };\n  const pendingTxResult = await sendTransactions(user, body, options);\n  return pendingTxResult;\n}\n\nasync function createContractList(user, contracts, options) {\n  const txs = contracts.map(contract => getCreateArgs(contract, options));\n  const body = {\n    txs\n  };\n  const pendingTxResultList = await sendTransactions(user, body, options);\n  return pendingTxResultList;\n}\n\nasync function blocResults(user, hashes, options) {\n  // TODO untested code\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.TXRESULTS, options);\n  return post(url, endpoint, hashes, setAuthHeaders(user, options));\n}\n\nasync function getAccounts(user, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.ACCOUNT, options);\n  return get(url, endpoint, setAuthHeaders(user, options));\n}\n\nasync function getBalance(user, options) {\n  let address = user.address;\n  if (!address) {\n    const response = await getKey(user, options);\n    address = response.address;\n  }\n  const accounts = await getAccounts(user, {\n    ...options,\n    // this endpoint does not accept the resolve flag\n    isAsync: true,\n    query: {\n      address\n    }\n  });\n  if (accounts.length == 0) {\n    return new BigNumber(0);\n  }\n\n  return new BigNumber(accounts[0].balance);\n}\n\nasync function getState(user, contract, options) {\n  const url = getNodeUrl(options);\n  const urlParams = {\n    name: contract.name,\n    address: contract.address\n  };\n  const endpoint = constructEndpoint(Endpoint.STATE, options, urlParams);\n  return get(url, endpoint, setAuthHeaders(user, options));\n}\n\nasync function getBatchStates(user, stateArgs, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.STATES, options);\n  const body = stateArgs ? stateArgs : [];\n  return post(url, endpoint, body, setAuthHeaders(user, options));\n}\n\nfunction getCallArgs(callMethodArgs, options) {\n  const { contract, method, args, value, chainid } = callMethodArgs;\n  const valueFixed = value instanceof BigNumber ? value.toFixed(0) : value;\n  const payload = {\n      contractName: contract.name,\n      contractAddress: contract.address,\n      chainid,\n      value: valueFixed,\n      method,\n      args,\n      metadata: constructMetadata(options, contract.name)\n  };\n  const tx = {\n      payload,\n      type: TxPayloadType.FUNCTION\n  };\n  return tx;\n}\n\nasync function call(user, callMethodArgs, options) {\n  const tx = getCallArgs(callMethodArgs, options);\n  const body = {\n    txs: [tx]\n  };\n  const pendingTxResult = await sendTransactions(user, body, options);\n  return pendingTxResult;\n}\n\nasync function callList(user, callListArgs, options) {\n  const txs = callListArgs.map(callArgs => getCallArgs(callArgs, options));\n  const body = {\n    txs\n  };\n  const pendingTxResultList = await sendTransactions(user, body, options);\n  return pendingTxResultList;\n}\n\nasync function sendTransactions(user, body, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.SEND, options);\n  return post(url, endpoint, body, setAuthHeaders(user, options));\n}\n\nfunction getSendArgs(sendTx, options) {\n  const tx = {\n    payload: sendTx,\n    type: TxPayloadType.TRANSFER\n  };\n  return tx;\n}\n\nasync function send(user, sendTx, options) {\n  const tx = getSendArgs(sendTx, options);\n  const body = {\n    txs: [tx]\n  };\n  return sendTransactions(user, body, options);\n}\n\nasync function getKey(user, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.KEY, options);\n  return get(url, endpoint, setAuthHeaders(user, options));\n}\n\nasync function createKey(user, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.KEY, options);\n  const body = {};\n  return post(url, endpoint, body, setAuthHeaders(user, options));\n}\n\nasync function search(user, contract, options) {\n  const url = getNodeUrl(options);\n  const urlParams = {\n    name: contract.name\n  };\n  const endpoint = constructEndpoint(Endpoint.SEARCH, options, urlParams);\n  return get(url, endpoint, setAuthHeaders(user, options));\n}\n\nasync function searchWithContentRange(user, contract, options) {\n  const url = getNodeUrl(options);\n  const urlParams = {\n      name: contract.name\n  };\n  const endpoint = constructEndpoint(Endpoint.SEARCH, options, urlParams);\n  const headersWithCount = { ...options.headers, Prefer: 'count=exact' };\n  const optionsWithCount = { ...options, headers: headersWithCount, getFullResponse: true };\n  const { data, headers } = await get(url, endpoint, setAuthHeaders(user, optionsWithCount));\n  const contentRangeStr = headers['content-range'];\n  const [range, countStr] = contentRangeStr.split('/');\n  const count = parseInt(countStr, 10);\n  if (range === \"*\") {\n    const contentRange = { count };\n    return { data, contentRange };\n  }\n  const [start, end] = range.split('-').map((s) => parseInt(s, 10));\n  const contentRange = { start, end, count };\n  return { data, contentRange };\n}\n\n// TODO: check options.params and options.headers in axoos wrapper.\nasync function getChains(chainIds, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.CHAIN, {\n    config: options.config,\n    chainIds\n  });\n  return get(url, endpoint, options);\n}\n\nasync function createChain(body, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.CHAIN, options);\n  return await post(url, endpoint, body, options);\n}\n\nasync function createChains(body, options) {\n    const url = getNodeUrl(options);\n    const endpoint = constructEndpoint(Endpoint.CHAINS, options);\n    return await post(url, endpoint, body, options);\n}\n\nasync function uploadExtStorage(body, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.EXT_UPLOAD, options);\n  return await post(url, endpoint, body, options);\n}\n\nasync function attestExtStorage(body, options) {\n  const url = getNodeUrl(options);\n  const endpoint = constructEndpoint(Endpoint.EXT_ATTEST, options);\n  return await post(url, endpoint, body, options);\n}\n\nasync function verifyExtStorage(user, contract, options) {\n  const url = getNodeUrl(options);\n  const params = {\n    contractAddress: contract.address\n  };\n  const endpoint = constructEndpoint(Endpoint.EXT_VERIFY, options, params);\n  return get(url, endpoint, setAuthHeaders(user, options));\n}\n\nasync function downloadExtStorage(user, contract, options) {\n  const url = getNodeUrl(options);\n  const params = {\n    contractAddress: contract.address\n  };\n  const endpoint = constructEndpoint(Endpoint.EXT_DOWNLOAD, options, params);\n  return get(url, endpoint, setAuthHeaders(user, options));\n}\n\nasync function listExtStorage(user, args, options) {\n  const url = getNodeUrl(options);\n  const { limit, offset } = args;\n  const params = {\n    limit,\n    offset\n  };\n  const endpoint = constructEndpoint(Endpoint.EXT_LIST, options, params);\n  return get(url, endpoint, setAuthHeaders(user, options));\n}\n\nasync function pingOauth(user, options){\n  const url = getNodeUrl(options)\n  const endpoint = constructEndpoint(Endpoint.KEY, options)\n  const result = await get(url, endpoint, setAuthHeaders(user, options))\n  return result.status\n}\n\nexport default {\n  getAccounts,\n  getBalance,\n  getUsers,\n  getUser,\n  createUser,\n  getCreateArgs,\n  createContract,\n  createContractList,\n  fill,\n  blocResults,\n  getState,\n  getBatchStates,\n  getCallArgs,\n  call,\n  callList,\n  getSendArgs,\n  send,\n  sendTransactions,\n  getKey,\n  createKey,\n  search,\n  searchWithContentRange,\n  getChains,\n  createChain,\n  createChains,\n  uploadExtStorage,\n  attestExtStorage,\n  verifyExtStorage,\n  downloadExtStorage,\n  listExtStorage,\n  pingOauth,\n}\n"]}